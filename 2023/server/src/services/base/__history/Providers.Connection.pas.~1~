unit Providers.Connection;

interface

uses System.SysUtils, System.Classes, FireDAC.Phys.FBDef, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  Data.DB, FireDAC.Comp.Client, FireDAC.Phys.IBBase, FireDAC.Comp.UI, FireDAC.ConsoleUI.Wait, Connection.Factory,
  Types.TipoProcessoServidor, Server.Process.Impl, System.JSON;

type
  TProviderConnection = class(TDataModule)
    Connection: TFDConnection;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    procedure DataModuleCreate(Sender: TObject);
  private
    FFilePathProcesso: string;
  protected
    FIdProcesso: Int64;
  public
    property IdProcesso: Int64 read FIdProcesso;
    property FilePathProcesso: string read FFilePathProcesso;
    function StartProcess(const AUserName: string; const AFilePath: string = ''): TJSONObject; virtual;
    procedure EndProcess(const AUserName: string; const AErrorMessage: string = ''); virtual;
  end;

implementation

{$R *.dfm}

procedure TProviderConnection.DataModuleCreate(Sender: TObject);
begin
  Connection.ConnectionDefName := TConnectionFactory.SIA.ConnectionDefName;
end;

procedure TProviderConnection.EndProcess(const AUserName, AErrorMessage: string);
begin
  if FIdProcesso > 0 then
    TServerProcess.New(Connection, AUserName).FinishProcess(FIdProcesso, AErrorMessage);
end;

function TProviderConnection.StartProcess(const AUserName: string; const AFilePath: string = ''): TJSONObject;
var
  LServerProcess: IServerProcess;
begin
  FFilePathProcesso := AFilePath;
  LServerProcess := TServerProcess.New(Connection, AUserName);
  if FIdProcesso = 0 then
    FIdProcesso := LServerProcess.StartNewProcess(TTipoProcessoServidor.Calculo, AFilePath);
  Result := LServerProcess.GetJSON(FIdProcesso);
end;

end.
